-- ===============================================
-- 100SERVICE COMPLETE DATABASE SETUP SCRIPT
-- ===============================================
-- This script creates the complete database schema for the 100Service application
-- It includes proper IF NOT EXISTS checks to avoid conflicts with existing tables
-- Safe to run multiple times

-- ===============================================
-- 1. CREATE TABLES
-- ===============================================

-- Users table
CREATE TABLE IF NOT EXISTS public.users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    full_name VARCHAR(255),
    name VARCHAR(255),
    phone VARCHAR(20),
    address TEXT,
    role VARCHAR(20) DEFAULT 'user' CHECK (role IN ('admin', 'provider', 'user')),
    is_verified BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Services table
CREATE TABLE IF NOT EXISTS public.services (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR(255) NOT NULL,
    description TEXT,
    category VARCHAR(100),
    subcategory VARCHAR(100),
    price DECIMAL(10, 2),
    duration_minutes INTEGER DEFAULT 60,
    image_url TEXT,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Bookings table
CREATE TABLE IF NOT EXISTS public.bookings (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    service_id INTEGER REFERENCES public.services(id) ON DELETE CASCADE,
    provider_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
    booking_date DATE NOT NULL,
    booking_time TIME NOT NULL,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'in_progress', 'completed', 'cancelled')),
    total_amount DECIMAL(10, 2),
    customer_name VARCHAR(255),
    customer_phone VARCHAR(20),
    customer_email VARCHAR(255),
    customer_address TEXT,
    special_instructions TEXT,
    payment_status VARCHAR(20) DEFAULT 'pending' CHECK (payment_status IN ('pending', 'paid', 'failed', 'refunded')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Service assignments (for providers)
CREATE TABLE IF NOT EXISTS public.service_assignments (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    provider_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    service_id INTEGER REFERENCES public.services(id) ON DELETE CASCADE,
    assigned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true,
    UNIQUE(provider_id, service_id)
);

-- Reviews table
CREATE TABLE IF NOT EXISTS public.reviews (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    booking_id INTEGER REFERENCES public.bookings(id) ON DELETE CASCADE,
    user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    provider_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    service_id INTEGER REFERENCES public.services(id) ON DELETE CASCADE,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Payment transactions table
CREATE TABLE IF NOT EXISTS public.payment_transactions (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    booking_id INTEGER REFERENCES public.bookings(id) ON DELETE CASCADE,
    amount DECIMAL(10, 2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'INR',
    payment_method VARCHAR(50),
    transaction_id VARCHAR(255) UNIQUE,
    gateway_response TEXT,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'completed', 'failed', 'refunded')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ===============================================
-- 2. INSERT SAMPLE SERVICES (IF NOT EXISTS)
-- ===============================================

-- Check and insert sample services
DO $$
BEGIN
    -- Insert services only if the table is empty
    IF NOT EXISTS (SELECT 1 FROM public.services LIMIT 1) THEN
        INSERT INTO public.services (name, description, category, subcategory, price, duration_minutes, image_url) VALUES
        
        -- Home Cleaning Services
        ('Regular House Cleaning', 'Complete house cleaning including dusting, mopping, and sanitization', 'cleaning', 'house-cleaning', 499.00, 120, '/images/house-cleaning.jpg'),
        ('Deep Cleaning Service', 'Intensive deep cleaning for your entire home', 'cleaning', 'deep-cleaning', 899.00, 240, '/images/deep-cleaning.jpg'),
        ('Sofa Cleaning', 'Professional sofa and upholstery cleaning', 'cleaning', 'sofa-cleaning', 299.00, 90, '/images/sofa-cleaning.jpg'),
        ('Carpet Cleaning', 'Professional carpet and rug cleaning service', 'cleaning', 'carpet-cleaning', 199.00, 60, '/images/carpet-cleaning.jpg'),
        ('Kitchen Deep Clean', 'Thorough kitchen cleaning including appliances', 'cleaning', 'kitchen-cleaning', 399.00, 90, '/images/kitchen-cleaning.jpg'),
        
        -- Appliance Services
        ('AC Service & Repair', 'Air conditioner servicing and repair', 'appliance', 'ac-service', 599.00, 90, '/images/ac-service.jpg'),
        ('Washing Machine Repair', 'Washing machine repair and maintenance', 'appliance', 'washing-machine', 349.00, 60, '/images/washing-machine.jpg'),
        ('Refrigerator Repair', 'Refrigerator repair and servicing', 'appliance', 'refrigerator', 449.00, 75, '/images/refrigerator.jpg'),
        ('Microwave Repair', 'Microwave oven repair service', 'appliance', 'microwave', 249.00, 45, '/images/microwave.jpg'),
        
        -- Home Maintenance
        ('Plumbing Service', 'Professional plumbing services and repairs', 'maintenance', 'plumbing', 299.00, 60, '/images/plumbing.jpg'),
        ('Electrical Work', 'Electrical installation and repair services', 'maintenance', 'electrical', 399.00, 75, '/images/electrical.jpg'),
        ('Painting Service', 'Professional painting for walls and surfaces', 'maintenance', 'painting', 1299.00, 480, '/images/painting.jpg'),
        ('Pest Control', 'Complete pest control and termite treatment', 'maintenance', 'pest-control', 799.00, 120, '/images/pest-control.jpg'),
        ('Water Tank Cleaning', 'Professional water tank cleaning service', 'maintenance', 'water-tank-cleaning', 499.00, 90, '/images/water-tank.jpg'),
        
        -- Beauty & Wellness
        ('Salon at Home for Women', 'Professional beauty services at your doorstep', 'beauty', 'salon-women', 599.00, 120, '/images/salon-women.jpg'),
        ('Salon at Home for Men', 'Professional grooming services for men', 'beauty', 'salon-men', 399.00, 90, '/images/salon-men.jpg'),
        ('Spa at Home', 'Relaxing spa treatments at your home', 'beauty', 'spa', 899.00, 150, '/images/spa.jpg'),
        
        -- Vehicle Care
        ('Car Wash & Detailing', 'Complete car washing and detailing service', 'vehicle', 'car-wash', 399.00, 90, '/images/car-wash.jpg'),
        ('Bike Service', 'Two-wheeler servicing and maintenance', 'vehicle', 'bike-service', 299.00, 60, '/images/bike-service.jpg'),
        
        -- Tech Services
        ('Laptop Repair', 'Laptop and computer repair services', 'tech', 'laptop-repair', 499.00, 75, '/images/laptop-repair.jpg'),
        ('Mobile Repair', 'Smartphone and tablet repair services', 'tech', 'mobile-repair', 299.00, 45, '/images/mobile-repair.jpg'),
        
        -- Others
        ('Gardening Service', 'Garden maintenance and landscaping', 'others', 'gardening', 399.00, 120, '/images/gardening.jpg'),
        ('Packers & Movers', 'Professional packing and moving services', 'others', 'packers-movers', 2999.00, 480, '/images/packers-movers.jpg');
        
        RAISE NOTICE 'Sample services inserted successfully';
    ELSE
        RAISE NOTICE 'Services already exist, skipping insert';
    END IF;
END $$;

-- ===============================================
-- 3. ENABLE ROW LEVEL SECURITY
-- ===============================================

-- Enable RLS on all tables
ALTER TABLE public.users ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.services ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.bookings ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.service_assignments ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.reviews ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.payment_transactions ENABLE ROW LEVEL SECURITY;

-- ===============================================
-- 4. DROP EXISTING POLICIES (IF ANY)
-- ===============================================

-- Users table policies
DROP POLICY IF EXISTS "Users can insert their own profile" ON public.users;
DROP POLICY IF EXISTS "Users can view their own profile" ON public.users;
DROP POLICY IF EXISTS "Users can update their own profile" ON public.users;
DROP POLICY IF EXISTS "Admins have full access to users" ON public.users;

-- Services table policies
DROP POLICY IF EXISTS "Services are viewable by everyone" ON public.services;
DROP POLICY IF EXISTS "Admins can manage services" ON public.services;

-- Bookings table policies
DROP POLICY IF EXISTS "Users can view their own bookings" ON public.bookings;
DROP POLICY IF EXISTS "Users can insert their own bookings" ON public.bookings;
DROP POLICY IF EXISTS "Users can update their own bookings" ON public.bookings;
DROP POLICY IF EXISTS "Providers can view assigned bookings" ON public.bookings;
DROP POLICY IF EXISTS "Providers can update assigned bookings" ON public.bookings;
DROP POLICY IF EXISTS "Admins have full access to bookings" ON public.bookings;

-- Service assignments policies
DROP POLICY IF EXISTS "Providers can view their assignments" ON public.service_assignments;
DROP POLICY IF EXISTS "Admins can manage service assignments" ON public.service_assignments;

-- Reviews policies
DROP POLICY IF EXISTS "Users can view all reviews" ON public.reviews;
DROP POLICY IF EXISTS "Users can insert their own reviews" ON public.reviews;
DROP POLICY IF EXISTS "Admins can manage reviews" ON public.reviews;

-- Payment transactions policies
DROP POLICY IF EXISTS "Users can view their own transactions" ON public.payment_transactions;
DROP POLICY IF EXISTS "Admins can view all transactions" ON public.payment_transactions;

-- ===============================================
-- 5. CREATE COMPREHENSIVE RLS POLICIES
-- ===============================================

-- USERS TABLE POLICIES
CREATE POLICY "Users can insert their own profile" ON public.users
    FOR INSERT 
    WITH CHECK (auth.uid() = id);

CREATE POLICY "Users can view their own profile" ON public.users
    FOR SELECT 
    USING (
        auth.uid() = id 
        OR EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

CREATE POLICY "Users can update their own profile" ON public.users
    FOR UPDATE 
    USING (auth.uid() = id)
    WITH CHECK (auth.uid() = id);

CREATE POLICY "Admins have full access to users" ON public.users
    FOR ALL
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- SERVICES TABLE POLICIES
CREATE POLICY "Services are viewable by everyone" ON public.services
    FOR SELECT 
    USING (true);

CREATE POLICY "Admins can manage services" ON public.services
    FOR ALL
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- BOOKINGS TABLE POLICIES
CREATE POLICY "Users can view their own bookings" ON public.bookings
    FOR SELECT 
    USING (
        user_id = auth.uid()
        OR provider_id = auth.uid()
        OR EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

CREATE POLICY "Users can insert their own bookings" ON public.bookings
    FOR INSERT 
    WITH CHECK (
        user_id = auth.uid()
        OR EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

CREATE POLICY "Users can update their own bookings" ON public.bookings
    FOR UPDATE 
    USING (
        user_id = auth.uid()
        OR provider_id = auth.uid()
        OR EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

CREATE POLICY "Admins have full access to bookings" ON public.bookings
    FOR ALL
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- SERVICE ASSIGNMENTS POLICIES
CREATE POLICY "Providers can view their assignments" ON public.service_assignments
    FOR SELECT 
    USING (
        provider_id = auth.uid()
        OR EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

CREATE POLICY "Admins can manage service assignments" ON public.service_assignments
    FOR ALL
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- REVIEWS POLICIES
CREATE POLICY "Users can view all reviews" ON public.reviews
    FOR SELECT 
    USING (true);

CREATE POLICY "Users can insert their own reviews" ON public.reviews
    FOR INSERT 
    WITH CHECK (
        user_id = auth.uid()
        OR EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

CREATE POLICY "Admins can manage reviews" ON public.reviews
    FOR ALL
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- PAYMENT TRANSACTIONS POLICIES
CREATE POLICY "Users can view their own transactions" ON public.payment_transactions
    FOR SELECT 
    USING (
        EXISTS (
            SELECT 1 FROM public.bookings 
            WHERE id = booking_id AND user_id = auth.uid()
        )
        OR EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

CREATE POLICY "Admins can view all transactions" ON public.payment_transactions
    FOR ALL
    TO authenticated
    USING (
        EXISTS (
            SELECT 1 FROM public.users 
            WHERE id = auth.uid() AND role = 'admin'
        )
    );

-- ===============================================
-- 6. CREATE INDEXES FOR PERFORMANCE
-- ===============================================

-- Create indexes if they don't exist
CREATE INDEX IF NOT EXISTS idx_users_role ON public.users(role);
CREATE INDEX IF NOT EXISTS idx_users_email ON public.users(email);
CREATE INDEX IF NOT EXISTS idx_users_created_at ON public.users(created_at);

CREATE INDEX IF NOT EXISTS idx_services_category ON public.services(category);
CREATE INDEX IF NOT EXISTS idx_services_subcategory ON public.services(subcategory);
CREATE INDEX IF NOT EXISTS idx_services_active ON public.services(is_active);

CREATE INDEX IF NOT EXISTS idx_bookings_user_id ON public.bookings(user_id);
CREATE INDEX IF NOT EXISTS idx_bookings_provider_id ON public.bookings(provider_id);
CREATE INDEX IF NOT EXISTS idx_bookings_service_id ON public.bookings(service_id);
CREATE INDEX IF NOT EXISTS idx_bookings_status ON public.bookings(status);
CREATE INDEX IF NOT EXISTS idx_bookings_date ON public.bookings(booking_date);
CREATE INDEX IF NOT EXISTS idx_bookings_created_at ON public.bookings(created_at);

CREATE INDEX IF NOT EXISTS idx_service_assignments_provider ON public.service_assignments(provider_id);
CREATE INDEX IF NOT EXISTS idx_service_assignments_service ON public.service_assignments(service_id);

CREATE INDEX IF NOT EXISTS idx_reviews_booking_id ON public.reviews(booking_id);
CREATE INDEX IF NOT EXISTS idx_reviews_service_id ON public.reviews(service_id);
CREATE INDEX IF NOT EXISTS idx_reviews_rating ON public.reviews(rating);

CREATE INDEX IF NOT EXISTS idx_payment_transactions_booking ON public.payment_transactions(booking_id);
CREATE INDEX IF NOT EXISTS idx_payment_transactions_status ON public.payment_transactions(status);

-- ===============================================
-- 7. CREATE FUNCTIONS AND TRIGGERS
-- ===============================================

-- Function to automatically set admin role for specific email
CREATE OR REPLACE FUNCTION set_admin_role()
RETURNS TRIGGER AS $$
BEGIN
    -- Set admin role for v9ibhav@gmail.com
    IF NEW.email = 'v9ibhav@gmail.com' THEN
        NEW.role = 'admin';
        NEW.is_verified = true;
    END IF;
    
    -- Set updated_at timestamp
    NEW.updated_at = NOW();
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for admin role setting
DROP TRIGGER IF EXISTS trigger_set_admin_role ON public.users;
CREATE TRIGGER trigger_set_admin_role
    BEFORE INSERT ON public.users
    FOR EACH ROW
    EXECUTE FUNCTION set_admin_role();

-- Create triggers for updated_at timestamps
DROP TRIGGER IF EXISTS trigger_users_updated_at ON public.users;
CREATE TRIGGER trigger_users_updated_at
    BEFORE UPDATE ON public.users
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS trigger_services_updated_at ON public.services;
CREATE TRIGGER trigger_services_updated_at
    BEFORE UPDATE ON public.services
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS trigger_bookings_updated_at ON public.bookings;
CREATE TRIGGER trigger_bookings_updated_at
    BEFORE UPDATE ON public.bookings
    FOR EACH ROW
    EXECUTE FUNCTION update_updated_at_column();

-- ===============================================
-- 8. GRANT PERMISSIONS
-- ===============================================

-- Grant necessary permissions for the application
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT ALL ON ALL TABLES IN SCHEMA public TO authenticated;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO authenticated;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO authenticated;

-- Grant permissions for anon role (for public access to services)
GRANT USAGE ON SCHEMA public TO anon;
GRANT SELECT ON public.services TO anon;

-- ===============================================
-- 9. FINAL ADMIN USER SETUP
-- ===============================================

-- Set v9ibhav@gmail.com as admin if user already exists
DO $$
BEGIN
    IF EXISTS (SELECT 1 FROM public.users WHERE email = 'v9ibhav@gmail.com') THEN
        UPDATE public.users 
        SET role = 'admin', is_verified = true, updated_at = NOW()
        WHERE email = 'v9ibhav@gmail.com';
        RAISE NOTICE 'Admin role set for existing user: v9ibhav@gmail.com';
    ELSE
        RAISE NOTICE 'Admin user will be created automatically on first login';
    END IF;
END $$;

-- ===============================================
-- SCRIPT COMPLETION MESSAGE
-- ===============================================

DO $$
BEGIN
    RAISE NOTICE '============================================';
    RAISE NOTICE '100SERVICE DATABASE SETUP COMPLETED!';
    RAISE NOTICE '============================================';
    RAISE NOTICE 'Tables created: users, services, bookings, service_assignments, reviews, payment_transactions';
    RAISE NOTICE 'Sample services: % services inserted', (SELECT COUNT(*) FROM public.services);
    RAISE NOTICE 'RLS policies: Applied to all tables';
    RAISE NOTICE 'Indexes: Created for performance optimization';
    RAISE NOTICE 'Triggers: Set up for auto role assignment and timestamps';
    RAISE NOTICE 'Admin user: v9ibhav@gmail.com (auto-assigned on login)';
    RAISE NOTICE '============================================';
    RAISE NOTICE 'Your database is ready for production use!';
    RAISE NOTICE '============================================';
END $$;