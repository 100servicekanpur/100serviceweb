-- ===============================================
-- FIX FOREIGN KEY DATA TYPE MISMATCH
-- ===============================================
-- This script fixes the foreign key constraint error by ensuring
-- all tables have compatible data types for foreign key relationships

-- First, let's check current table structures
DO $$
DECLARE
    services_id_type text;
    users_id_type text;
BEGIN
    -- Check if tables exist and get their ID column types
    SELECT data_type INTO services_id_type 
    FROM information_schema.columns 
    WHERE table_schema = 'public' 
    AND table_name = 'services' 
    AND column_name = 'id';
    
    SELECT data_type INTO users_id_type 
    FROM information_schema.columns 
    WHERE table_schema = 'public' 
    AND table_name = 'users' 
    AND column_name = 'id';
    
    RAISE NOTICE 'Current table structures:';
    RAISE NOTICE 'services.id type: %', COALESCE(services_id_type, 'TABLE NOT FOUND');
    RAISE NOTICE 'users.id type: %', COALESCE(users_id_type, 'TABLE NOT FOUND');
END $$;

-- Drop dependent tables first (in reverse dependency order)
DROP TABLE IF EXISTS public.payment_transactions CASCADE;
DROP TABLE IF EXISTS public.reviews CASCADE;
DROP TABLE IF EXISTS public.service_assignments CASCADE;
DROP TABLE IF EXISTS public.bookings CASCADE;

-- Check if services table has wrong data type and recreate if needed
DO $$
DECLARE
    services_id_type text;
BEGIN
    SELECT data_type INTO services_id_type 
    FROM information_schema.columns 
    WHERE table_schema = 'public' 
    AND table_name = 'services' 
    AND column_name = 'id';
    
    -- If services.id is UUID, we need to recreate it as INTEGER
    IF services_id_type = 'uuid' THEN
        RAISE NOTICE 'Services table has UUID id, recreating with INTEGER id...';
        
        -- Backup existing services data if any
        CREATE TEMP TABLE services_backup AS 
        SELECT name, description, category, subcategory, price, duration_minutes, image_url, is_active, created_at, updated_at
        FROM public.services;
        
        -- Drop and recreate services table
        DROP TABLE IF EXISTS public.services CASCADE;
        
        CREATE TABLE public.services (
            id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
            name VARCHAR(255) NOT NULL,
            description TEXT,
            category VARCHAR(100),
            subcategory VARCHAR(100),
            price DECIMAL(10, 2),
            duration_minutes INTEGER DEFAULT 60,
            image_url TEXT,
            is_active BOOLEAN DEFAULT true,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
            updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
        );
        
        -- Restore data
        INSERT INTO public.services (name, description, category, subcategory, price, duration_minutes, image_url, is_active, created_at, updated_at)
        SELECT name, description, category, subcategory, price, duration_minutes, image_url, is_active, created_at, updated_at
        FROM services_backup;
        
        RAISE NOTICE 'Services table recreated with INTEGER id';
    ELSE
        RAISE NOTICE 'Services table id type is correct: %', COALESCE(services_id_type, 'TABLE NOT FOUND');
    END IF;
END $$;

-- Now create all dependent tables with correct foreign key types
-- Bookings table
CREATE TABLE IF NOT EXISTS public.bookings (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    service_id INTEGER REFERENCES public.services(id) ON DELETE CASCADE,
    provider_id UUID REFERENCES public.users(id) ON DELETE SET NULL,
    booking_date DATE NOT NULL,
    booking_time TIME NOT NULL,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'confirmed', 'in_progress', 'completed', 'cancelled')),
    total_amount DECIMAL(10, 2),
    customer_name VARCHAR(255),
    customer_phone VARCHAR(20),
    customer_email VARCHAR(255),
    customer_address TEXT,
    special_instructions TEXT,
    payment_status VARCHAR(20) DEFAULT 'pending' CHECK (payment_status IN ('pending', 'paid', 'failed', 'refunded')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Service assignments (for providers)
CREATE TABLE IF NOT EXISTS public.service_assignments (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    provider_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    service_id INTEGER REFERENCES public.services(id) ON DELETE CASCADE,
    assigned_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true,
    UNIQUE(provider_id, service_id)
);

-- Reviews table
CREATE TABLE IF NOT EXISTS public.reviews (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    booking_id INTEGER REFERENCES public.bookings(id) ON DELETE CASCADE,
    user_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    provider_id UUID REFERENCES public.users(id) ON DELETE CASCADE,
    service_id INTEGER REFERENCES public.services(id) ON DELETE CASCADE,
    rating INTEGER CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Payment transactions table
CREATE TABLE IF NOT EXISTS public.payment_transactions (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    booking_id INTEGER REFERENCES public.bookings(id) ON DELETE CASCADE,
    amount DECIMAL(10, 2) NOT NULL,
    currency VARCHAR(3) DEFAULT 'INR',
    payment_method VARCHAR(50),
    transaction_id VARCHAR(255) UNIQUE,
    gateway_response TEXT,
    status VARCHAR(20) DEFAULT 'pending' CHECK (status IN ('pending', 'completed', 'failed', 'refunded')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Re-insert sample services if table was recreated and is empty
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM public.services LIMIT 1) THEN
        INSERT INTO public.services (name, description, category, subcategory, price, duration_minutes, image_url) VALUES
        
        -- Home Cleaning Services
        ('Regular House Cleaning', 'Complete house cleaning including dusting, mopping, and sanitization', 'cleaning', 'house-cleaning', 499.00, 120, '/images/house-cleaning.jpg'),
        ('Deep Cleaning Service', 'Intensive deep cleaning for your entire home', 'cleaning', 'deep-cleaning', 899.00, 240, '/images/deep-cleaning.jpg'),
        ('Sofa Cleaning', 'Professional sofa and upholstery cleaning', 'cleaning', 'sofa-cleaning', 299.00, 90, '/images/sofa-cleaning.jpg'),
        ('Carpet Cleaning', 'Professional carpet and rug cleaning service', 'cleaning', 'carpet-cleaning', 199.00, 60, '/images/carpet-cleaning.jpg'),
        ('Kitchen Deep Clean', 'Thorough kitchen cleaning including appliances', 'cleaning', 'kitchen-cleaning', 399.00, 90, '/images/kitchen-cleaning.jpg'),
        
        -- Appliance Services
        ('AC Service & Repair', 'Air conditioner servicing and repair', 'appliance', 'ac-service', 599.00, 90, '/images/ac-service.jpg'),
        ('Washing Machine Repair', 'Washing machine repair and maintenance', 'appliance', 'washing-machine', 349.00, 60, '/images/washing-machine.jpg'),
        ('Refrigerator Repair', 'Refrigerator repair and servicing', 'appliance', 'refrigerator', 449.00, 75, '/images/refrigerator.jpg'),
        ('Microwave Repair', 'Microwave oven repair service', 'appliance', 'microwave', 249.00, 45, '/images/microwave.jpg'),
        
        -- Home Maintenance
        ('Plumbing Service', 'Professional plumbing services and repairs', 'maintenance', 'plumbing', 299.00, 60, '/images/plumbing.jpg'),
        ('Electrical Work', 'Electrical installation and repair services', 'maintenance', 'electrical', 399.00, 75, '/images/electrical.jpg'),
        ('Painting Service', 'Professional painting for walls and surfaces', 'maintenance', 'painting', 1299.00, 480, '/images/painting.jpg'),
        ('Pest Control', 'Complete pest control and termite treatment', 'maintenance', 'pest-control', 799.00, 120, '/images/pest-control.jpg'),
        ('Water Tank Cleaning', 'Professional water tank cleaning service', 'maintenance', 'water-tank-cleaning', 499.00, 90, '/images/water-tank.jpg'),
        
        -- Beauty & Wellness
        ('Salon at Home for Women', 'Professional beauty services at your doorstep', 'beauty', 'salon-women', 599.00, 120, '/images/salon-women.jpg'),
        ('Salon at Home for Men', 'Professional grooming services for men', 'beauty', 'salon-men', 399.00, 90, '/images/salon-men.jpg'),
        ('Spa at Home', 'Relaxing spa treatments at your home', 'beauty', 'spa', 899.00, 150, '/images/spa.jpg'),
        
        -- Vehicle Care
        ('Car Wash & Detailing', 'Complete car washing and detailing service', 'vehicle', 'car-wash', 399.00, 90, '/images/car-wash.jpg'),
        ('Bike Service', 'Two-wheeler servicing and maintenance', 'vehicle', 'bike-service', 299.00, 60, '/images/bike-service.jpg'),
        
        -- Tech Services
        ('Laptop Repair', 'Laptop and computer repair services', 'tech', 'laptop-repair', 499.00, 75, '/images/laptop-repair.jpg'),
        ('Mobile Repair', 'Smartphone and tablet repair services', 'tech', 'mobile-repair', 299.00, 45, '/images/mobile-repair.jpg'),
        
        -- Others
        ('Gardening Service', 'Garden maintenance and landscaping', 'others', 'gardening', 399.00, 120, '/images/gardening.jpg'),
        ('Packers & Movers', 'Professional packing and moving services', 'others', 'packers-movers', 2999.00, 480, '/images/packers-movers.jpg');
        
        RAISE NOTICE 'Sample services inserted successfully';
    ELSE
        RAISE NOTICE 'Services already exist, skipping insert';
    END IF;
END $$;

-- Final verification
DO $$
DECLARE
    services_id_type text;
    users_id_type text;
BEGIN
    SELECT data_type INTO services_id_type 
    FROM information_schema.columns 
    WHERE table_schema = 'public' 
    AND table_name = 'services' 
    AND column_name = 'id';
    
    SELECT data_type INTO users_id_type 
    FROM information_schema.columns 
    WHERE table_schema = 'public' 
    AND table_name = 'users' 
    AND column_name = 'id';
    
    RAISE NOTICE '=== FINAL TABLE STRUCTURES ===';
    RAISE NOTICE 'services.id type: %', services_id_type;
    RAISE NOTICE 'users.id type: %', users_id_type;
    RAISE NOTICE 'Foreign key data types should now be compatible!';
    RAISE NOTICE '===============================';
END $$;